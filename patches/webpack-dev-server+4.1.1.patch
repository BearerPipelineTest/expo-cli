diff --git a/node_modules/webpack-dev-server/lib/Server.js b/node_modules/webpack-dev-server/lib/Server.js
index 5a7d456..ef731c1 100644
--- a/node_modules/webpack-dev-server/lib/Server.js
+++ b/node_modules/webpack-dev-server/lib/Server.js
@@ -1,15 +1,15 @@
-"use strict";
-
-const os = require("os");
-const path = require("path");
-const url = require("url");
-const util = require("util");
-const fs = require("graceful-fs");
-const ipaddr = require("ipaddr.js");
-const internalIp = require("internal-ip");
-const express = require("express");
-const { validate } = require("schema-utils");
-const schema = require("./options.json");
+'use strict';
+
+const os = require('os');
+const path = require('path');
+const url = require('url');
+const util = require('util');
+const fs = require('graceful-fs');
+const ipaddr = require('ipaddr.js');
+const internalIp = require('internal-ip');
+const express = require('express');
+const { validate } = require('schema-utils');
+const schema = require('./options.json');
 
 if (!process.env.WEBPACK_SERVE) {
   process.env.WEBPACK_SERVE = true;
@@ -22,13 +22,13 @@ class Server {
       util.deprecate(
         () => {},
         "Using 'compiler' as the first argument is deprecated. Please use 'options' as the first argument and 'compiler' as the second argument.",
-        "DEP_WEBPACK_DEV_SERVER_CONSTRUCTOR"
+        'DEP_WEBPACK_DEV_SERVER_CONSTRUCTOR'
       )();
 
       [options = {}, compiler] = [compiler, options];
     }
 
-    validate(schema, options, "webpack Dev Server");
+    validate(schema, options, 'webpack Dev Server');
 
     this.options = options;
     this.staticWatchers = [];
@@ -62,31 +62,30 @@ class Server {
   }
 
   static async getHostname(hostname) {
-    if (hostname === "local-ip") {
-      return (await internalIp.v4()) || (await internalIp.v6()) || "0.0.0.0";
-    } else if (hostname === "local-ipv4") {
-      return (await internalIp.v4()) || "0.0.0.0";
-    } else if (hostname === "local-ipv6") {
-      return (await internalIp.v6()) || "::";
+    if (hostname === 'local-ip') {
+      return (await internalIp.v4()) || (await internalIp.v6()) || '0.0.0.0';
+    } else if (hostname === 'local-ipv4') {
+      return (await internalIp.v4()) || '0.0.0.0';
+    } else if (hostname === 'local-ipv6') {
+      return (await internalIp.v6()) || '::';
     }
 
     return hostname;
   }
 
   static async getFreePort(port) {
-    if (port && port !== "auto") {
+    if (port && port !== 'auto') {
       return port;
     }
 
-    const pRetry = require("p-retry");
-    const portfinder = require("portfinder");
+    const pRetry = require('p-retry');
+    const portfinder = require('portfinder');
 
     portfinder.basePort = process.env.WEBPACK_DEV_SERVER_BASE_PORT || 8080;
 
     // Try to find unused port and listen on it for 3 times,
     // if port is not specified in options.
-    const defaultPortRetry =
-      parseInt(process.env.WEBPACK_DEV_SERVER_PORT_RETRY, 10) || 3;
+    const defaultPortRetry = parseInt(process.env.WEBPACK_DEV_SERVER_PORT_RETRY, 10) || 3;
 
     return pRetry(() => portfinder.getPortPromise(), {
       retries: defaultPortRetry,
@@ -100,7 +99,7 @@ class Server {
 
     for (;;) {
       try {
-        if (fs.statSync(path.join(dir, "package.json")).isFile()) break;
+        if (fs.statSync(path.join(dir, 'package.json')).isFile()) break;
         // eslint-disable-next-line no-empty
       } catch (e) {}
 
@@ -116,14 +115,14 @@ class Server {
     }
 
     if (!dir) {
-      return path.resolve(cwd, ".cache/webpack-dev-server");
-    } else if (process.versions.pnp === "1") {
-      return path.resolve(dir, ".pnp/.cache/webpack-dev-server");
-    } else if (process.versions.pnp === "3") {
-      return path.resolve(dir, ".yarn/.cache/webpack-dev-server");
+      return path.resolve(cwd, '.cache/webpack-dev-server');
+    } else if (process.versions.pnp === '1') {
+      return path.resolve(dir, '.pnp/.cache/webpack-dev-server');
+    } else if (process.versions.pnp === '3') {
+      return path.resolve(dir, '.yarn/.cache/webpack-dev-server');
     }
 
-    return path.resolve(dir, "node_modules/.cache/webpack-dev-server");
+    return path.resolve(dir, 'node_modules/.cache/webpack-dev-server');
   }
 
   addAdditionalEntries(compiler) {
@@ -132,19 +131,20 @@ class Server {
     const isWebTarget = compiler.options.externalsPresets
       ? compiler.options.externalsPresets.web
       : [
-          "web",
-          "webworker",
-          "electron-preload",
-          "electron-renderer",
-          "node-webkit",
+          'web',
+          'webworker',
+          'electron-preload',
+          'electron-renderer',
+          'node-webkit',
           // eslint-disable-next-line no-undefined
           undefined,
           null,
         ].includes(compiler.options.target);
 
     // TODO maybe empty empty client
-    if (this.options.client && isWebTarget) {
-      let webSocketURL = "";
+    if (this.options.client && isWebTarget && this.options.client.overlay !== false) {
+      console.log('add overlay');
+      let webSocketURL = '';
       if (this.options.webSocketServer) {
         const searchParams = new URLSearchParams();
 
@@ -152,26 +152,20 @@ class Server {
         let protocol;
 
         // We are proxying dev server and need to specify custom `hostname`
-        if (typeof this.options.client.webSocketURL.protocol !== "undefined") {
+        if (typeof this.options.client.webSocketURL.protocol !== 'undefined') {
           protocol = this.options.client.webSocketURL.protocol;
         } else {
-          protocol = this.options.https ? "wss:" : "ws:";
+          protocol = this.options.https ? 'wss:' : 'ws:';
         }
 
-        searchParams.set("protocol", protocol);
+        searchParams.set('protocol', protocol);
 
-        if (typeof this.options.client.webSocketURL.username !== "undefined") {
-          searchParams.set(
-            "username",
-            this.options.client.webSocketURL.username
-          );
+        if (typeof this.options.client.webSocketURL.username !== 'undefined') {
+          searchParams.set('username', this.options.client.webSocketURL.username);
         }
 
-        if (typeof this.options.client.webSocketURL.password !== "undefined") {
-          searchParams.set(
-            "password",
-            this.options.client.webSocketURL.password
-          );
+        if (typeof this.options.client.webSocketURL.password !== 'undefined') {
+          searchParams.set('password', this.options.client.webSocketURL.password);
         }
 
         /** @type {string} */
@@ -179,109 +173,104 @@ class Server {
 
         // SockJS is not supported server mode, so `hostname` and `port` can't specified, let's ignore them
         // TODO show warning about this
-        const isSockJSType = this.options.webSocketServer.type === "sockjs";
+        const isSockJSType = this.options.webSocketServer.type === 'sockjs';
 
         // We are proxying dev server and need to specify custom `hostname`
-        if (typeof this.options.client.webSocketURL.hostname !== "undefined") {
+        if (typeof this.options.client.webSocketURL.hostname !== 'undefined') {
           hostname = this.options.client.webSocketURL.hostname;
         }
         // Web socket server works on custom `hostname`, only for `ws` because `sock-js` is not support custom `hostname`
         else if (
-          typeof this.options.webSocketServer.options.host !== "undefined" &&
+          typeof this.options.webSocketServer.options.host !== 'undefined' &&
           !isSockJSType
         ) {
           hostname = this.options.webSocketServer.options.host;
         }
         // The `host` option is specified
-        else if (typeof this.options.host !== "undefined") {
+        else if (typeof this.options.host !== 'undefined') {
           hostname = this.options.host;
         }
         // The `port` option is not specified
         else {
-          hostname = "0.0.0.0";
+          hostname = '0.0.0.0';
         }
 
-        searchParams.set("hostname", hostname);
+        searchParams.set('hostname', hostname);
 
         /** @type {number | string} */
         let port;
 
         // We are proxying dev server and need to specify custom `port`
-        if (typeof this.options.client.webSocketURL.port !== "undefined") {
+        if (typeof this.options.client.webSocketURL.port !== 'undefined') {
           port = this.options.client.webSocketURL.port;
         }
         // Web socket server works on custom `port`, only for `ws` because `sock-js` is not support custom `port`
         else if (
-          typeof this.options.webSocketServer.options.port !== "undefined" &&
+          typeof this.options.webSocketServer.options.port !== 'undefined' &&
           !isSockJSType
         ) {
           port = this.options.webSocketServer.options.port;
         }
         // The `port` option is specified
-        else if (typeof this.options.port === "number") {
+        else if (typeof this.options.port === 'number') {
           port = this.options.port;
         }
         // The `port` option is specified using `string`
-        else if (
-          typeof this.options.port === "string" &&
-          this.options.port !== "auto"
-        ) {
+        else if (typeof this.options.port === 'string' && this.options.port !== 'auto') {
           port = Number(this.options.port);
         }
         // The `port` option is not specified or set to `auto`
         else {
-          port = "0";
+          port = '0';
         }
 
-        searchParams.set("port", String(port));
+        searchParams.set('port', String(port));
 
         /** @type {string} */
-        let pathname = "";
+        let pathname = '';
 
         // We are proxying dev server and need to specify custom `pathname`
-        if (typeof this.options.client.webSocketURL.pathname !== "undefined") {
+        if (typeof this.options.client.webSocketURL.pathname !== 'undefined') {
           pathname = this.options.client.webSocketURL.pathname;
         }
         // Web socket server works on custom `path`
         else if (
-          typeof this.options.webSocketServer.options.prefix !== "undefined" ||
-          typeof this.options.webSocketServer.options.path !== "undefined"
+          typeof this.options.webSocketServer.options.prefix !== 'undefined' ||
+          typeof this.options.webSocketServer.options.path !== 'undefined'
         ) {
           pathname =
             this.options.webSocketServer.options.prefix ||
             this.options.webSocketServer.options.path;
         }
 
-        searchParams.set("pathname", pathname);
+        searchParams.set('pathname', pathname);
 
-        if (typeof this.options.client.logging !== "undefined") {
-          searchParams.set("logging", this.options.client.logging);
+        if (typeof this.options.client.logging !== 'undefined') {
+          searchParams.set('logging', this.options.client.logging);
         }
 
         webSocketURL = searchParams.toString();
       }
 
-      additionalEntries.push(
-        `${require.resolve("../client/index.js")}?${webSocketURL}`
-      );
+      additionalEntries.push(`${require.resolve('../client/index.js')}?${webSocketURL}`);
     }
 
     if (this.options.hot) {
       let hotEntry;
 
-      if (this.options.hot === "only") {
-        hotEntry = require.resolve("webpack/hot/only-dev-server");
+      if (this.options.hot === 'only') {
+        hotEntry = require.resolve('webpack/hot/only-dev-server');
       } else if (this.options.hot) {
-        hotEntry = require.resolve("webpack/hot/dev-server");
+        hotEntry = require.resolve('webpack/hot/dev-server');
       }
 
       additionalEntries.push(hotEntry);
     }
 
-    const webpack = compiler.webpack || require("webpack");
+    const webpack = compiler.webpack || require('webpack');
 
     // use a hook to add entries if available
-    if (typeof webpack.EntryPlugin !== "undefined") {
+    if (typeof webpack.EntryPlugin !== 'undefined') {
       for (const additionalEntry of additionalEntries) {
         new webpack.EntryPlugin(compiler.context, additionalEntry, {
           // eslint-disable-next-line no-undefined
@@ -298,21 +287,18 @@ class Server {
        * @returns {Entry}
        */
       const prependEntry = (originalEntry, newAdditionalEntries) => {
-        if (typeof originalEntry === "function") {
+        if (typeof originalEntry === 'function') {
           return () =>
-            Promise.resolve(originalEntry()).then((entry) =>
+            Promise.resolve(originalEntry()).then(entry =>
               prependEntry(entry, newAdditionalEntries)
             );
         }
 
-        if (
-          typeof originalEntry === "object" &&
-          !Array.isArray(originalEntry)
-        ) {
+        if (typeof originalEntry === 'object' && !Array.isArray(originalEntry)) {
           /** @type {Object<string,string>} */
           const clone = {};
 
-          Object.keys(originalEntry).forEach((key) => {
+          Object.keys(originalEntry).forEach(key => {
             // entry[key] should be a string here
             const entryDescription = originalEntry[key];
 
@@ -327,7 +313,7 @@ class Server {
         /** @type {Entry} */
         const entriesClone = additionalEntries.slice(0);
 
-        [].concat(originalEntry).forEach((newEntry) => {
+        [].concat(originalEntry).forEach(newEntry => {
           if (!entriesClone.includes(newEntry)) {
             entriesClone.push(newEntry);
           }
@@ -336,26 +322,20 @@ class Server {
         return entriesClone;
       };
 
-      compiler.options.entry = prependEntry(
-        compiler.options.entry || "./src",
-        additionalEntries
-      );
-      compiler.hooks.entryOption.call(
-        compiler.options.context,
-        compiler.options.entry
-      );
+      compiler.options.entry = prependEntry(compiler.options.entry || './src', additionalEntries);
+      compiler.hooks.entryOption.call(compiler.options.context, compiler.options.entry);
     }
   }
 
   getCompilerOptions() {
-    if (typeof this.compiler.compilers !== "undefined") {
+    if (typeof this.compiler.compilers !== 'undefined') {
       if (this.compiler.compilers.length === 1) {
         return this.compiler.compilers[0].options;
       }
 
       // Configuration with the `devServer` options
       const compilerWithDevServer = this.compiler.compilers.find(
-        (config) => config.options.devServer
+        config => config.options.devServer
       );
 
       if (compilerWithDevServer) {
@@ -364,15 +344,14 @@ class Server {
 
       // Configuration with `web` preset
       const compilerWithWebPreset = this.compiler.compilers.find(
-        (config) =>
-          (config.options.externalsPresets &&
-            config.options.externalsPresets.web) ||
+        config =>
+          (config.options.externalsPresets && config.options.externalsPresets.web) ||
           [
-            "web",
-            "webworker",
-            "electron-preload",
-            "electron-renderer",
-            "node-webkit",
+            'web',
+            'webworker',
+            'electron-preload',
+            'electron-renderer',
+            'node-webkit',
             // eslint-disable-next-line no-undefined
             undefined,
             null,
@@ -395,78 +374,73 @@ class Server {
     const { options } = this;
 
     if (!this.logger) {
-      this.logger = this.compiler.getInfrastructureLogger("webpack-dev-server");
+      this.logger = this.compiler.getInfrastructureLogger('webpack-dev-server');
     }
 
     const compilerOptions = this.getCompilerOptions();
     // TODO remove `{}` after drop webpack v4 support
     const watchOptions = compilerOptions.watchOptions || {};
     const defaultOptionsForStatic = {
-      directory: path.join(process.cwd(), "public"),
+      directory: path.join(process.cwd(), 'public'),
       staticOptions: {},
-      publicPath: ["/"],
+      publicPath: ['/'],
       serveIndex: { icons: true },
       // Respect options from compiler watchOptions
       watch: watchOptions,
     };
 
-    if (typeof options.allowedHosts === "undefined") {
+    if (typeof options.allowedHosts === 'undefined') {
       // AllowedHosts allows some default hosts picked from `options.host` or `webSocketURL.hostname` and `localhost`
-      options.allowedHosts = "auto";
+      options.allowedHosts = 'auto';
     }
     // We store allowedHosts as array when supplied as string
     else if (
-      typeof options.allowedHosts === "string" &&
-      options.allowedHosts !== "auto" &&
-      options.allowedHosts !== "all"
+      typeof options.allowedHosts === 'string' &&
+      options.allowedHosts !== 'auto' &&
+      options.allowedHosts !== 'all'
     ) {
       options.allowedHosts = [options.allowedHosts];
     }
     // CLI pass options as array, we should normalize them
-    else if (
-      Array.isArray(options.allowedHosts) &&
-      options.allowedHosts.includes("all")
-    ) {
-      options.allowedHosts = "all";
+    else if (Array.isArray(options.allowedHosts) && options.allowedHosts.includes('all')) {
+      options.allowedHosts = 'all';
     }
 
-    if (typeof options.bonjour === "undefined") {
+    if (typeof options.bonjour === 'undefined') {
       options.bonjour = false;
-    } else if (typeof options.bonjour === "boolean") {
+    } else if (typeof options.bonjour === 'boolean') {
       options.bonjour = options.bonjour ? {} : false;
     }
 
     if (
-      typeof options.client === "undefined" ||
-      (typeof options.client === "object" && options.client !== null)
+      typeof options.client === 'undefined' ||
+      (typeof options.client === 'object' && options.client !== null)
     ) {
       if (!options.client) {
         options.client = {};
       }
 
-      if (typeof options.client.webSocketURL === "undefined") {
+      if (typeof options.client.webSocketURL === 'undefined') {
         options.client.webSocketURL = {};
-      } else if (typeof options.client.webSocketURL === "string") {
+      } else if (typeof options.client.webSocketURL === 'string') {
         const parsedURL = new URL(options.client.webSocketURL);
 
         options.client.webSocketURL = {
           protocol: parsedURL.protocol,
           hostname: parsedURL.hostname,
-          port: parsedURL.port.length > 0 ? Number(parsedURL.port) : "",
+          port: parsedURL.port.length > 0 ? Number(parsedURL.port) : '',
           pathname: parsedURL.pathname,
           username: parsedURL.username,
           password: parsedURL.password,
         };
-      } else if (typeof options.client.webSocketURL.port === "string") {
-        options.client.webSocketURL.port = Number(
-          options.client.webSocketURL.port
-        );
+      } else if (typeof options.client.webSocketURL.port === 'string') {
+        options.client.webSocketURL.port = Number(options.client.webSocketURL.port);
       }
 
       // Enable client overlay by default
-      if (typeof options.client.overlay === "undefined") {
+      if (typeof options.client.overlay === 'undefined') {
         options.client.overlay = true;
-      } else if (typeof options.client.overlay !== "boolean") {
+      } else if (typeof options.client.overlay !== 'boolean') {
         options.client.overlay = {
           errors: true,
           warnings: true,
@@ -475,38 +449,32 @@ class Server {
       }
 
       // Respect infrastructureLogging.level
-      if (typeof options.client.logging === "undefined") {
+      if (typeof options.client.logging === 'undefined') {
         options.client.logging = compilerOptions.infrastructureLogging
           ? compilerOptions.infrastructureLogging.level
-          : "info";
+          : 'info';
       }
     }
 
-    if (typeof options.compress === "undefined") {
+    if (typeof options.compress === 'undefined') {
       options.compress = true;
     }
 
-    if (typeof options.devMiddleware === "undefined") {
+    if (typeof options.devMiddleware === 'undefined') {
       options.devMiddleware = {};
     }
 
     // No need to normalize `headers`
 
-    if (typeof options.historyApiFallback === "undefined") {
+    if (typeof options.historyApiFallback === 'undefined') {
       options.historyApiFallback = false;
-    } else if (
-      typeof options.historyApiFallback === "boolean" &&
-      options.historyApiFallback
-    ) {
+    } else if (typeof options.historyApiFallback === 'boolean' && options.historyApiFallback) {
       options.historyApiFallback = {};
     }
 
     // No need to normalize `host`
 
-    options.hot =
-      typeof options.hot === "boolean" || options.hot === "only"
-        ? options.hot
-        : true;
+    options.hot = typeof options.hot === 'boolean' || options.hot === 'only' ? options.hot : true;
 
     // if the user enables http2, we can safely enable https
     if ((options.http2 && !options.https) || options.https === true) {
@@ -517,7 +485,7 @@ class Server {
 
     // https option
     if (options.https) {
-      for (const property of ["cacert", "pfx", "key", "cert"]) {
+      for (const property of ['cacert', 'pfx', 'key', 'cert']) {
         const value = options.https[property];
         const isBuffer = value instanceof Buffer;
 
@@ -531,9 +499,7 @@ class Server {
           }
 
           // It is file
-          options.https[property] = stats
-            ? fs.readFileSync(path.resolve(value))
-            : value;
+          options.https[property] = stats ? fs.readFileSync(path.resolve(value)) : value;
         }
       }
 
@@ -541,7 +507,7 @@ class Server {
 
       if (!options.https.key || !options.https.cert) {
         const certificateDir = Server.findCacheDir();
-        const certificatePath = path.join(certificateDir, "server.pem");
+        const certificatePath = path.join(certificateDir, 'server.pem');
         let certificateExists;
 
         try {
@@ -559,11 +525,9 @@ class Server {
 
           // cert is more than 30 days old, kill it with fire
           if ((now - certificateStat.ctime) / certificateTtl > 30) {
-            const del = require("del");
+            const del = require('del');
 
-            this.logger.info(
-              "SSL Certificate is more than 30 days old. Removing..."
-            );
+            this.logger.info('SSL Certificate is more than 30 days old. Removing...');
 
             await del([certificatePath], { force: true });
 
@@ -572,21 +536,21 @@ class Server {
         }
 
         if (!certificateExists) {
-          this.logger.info("Generating SSL Certificate...");
+          this.logger.info('Generating SSL Certificate...');
 
-          const selfsigned = require("selfsigned");
-          const attributes = [{ name: "commonName", value: "localhost" }];
+          const selfsigned = require('selfsigned');
+          const attributes = [{ name: 'commonName', value: 'localhost' }];
           const pems = selfsigned.generate(attributes, {
-            algorithm: "sha256",
+            algorithm: 'sha256',
             days: 30,
             keySize: 2048,
             extensions: [
               {
-                name: "basicConstraints",
+                name: 'basicConstraints',
                 cA: true,
               },
               {
-                name: "keyUsage",
+                name: 'keyUsage',
                 keyCertSign: true,
                 digitalSignature: true,
                 nonRepudiation: true,
@@ -594,44 +558,44 @@ class Server {
                 dataEncipherment: true,
               },
               {
-                name: "extKeyUsage",
+                name: 'extKeyUsage',
                 serverAuth: true,
                 clientAuth: true,
                 codeSigning: true,
                 timeStamping: true,
               },
               {
-                name: "subjectAltName",
+                name: 'subjectAltName',
                 altNames: [
                   {
                     // type 2 is DNS
                     type: 2,
-                    value: "localhost",
+                    value: 'localhost',
                   },
                   {
                     type: 2,
-                    value: "localhost.localdomain",
+                    value: 'localhost.localdomain',
                   },
                   {
                     type: 2,
-                    value: "lvh.me",
+                    value: 'lvh.me',
                   },
                   {
                     type: 2,
-                    value: "*.lvh.me",
+                    value: '*.lvh.me',
                   },
                   {
                     type: 2,
-                    value: "[::1]",
+                    value: '[::1]',
                   },
                   {
                     // type 7 is IP
                     type: 7,
-                    ip: "127.0.0.1",
+                    ip: '127.0.0.1',
                   },
                   {
                     type: 7,
-                    ip: "fe80::1",
+                    ip: 'fe80::1',
                   },
                 ],
               },
@@ -640,13 +604,9 @@ class Server {
 
           await fs.promises.mkdir(certificateDir, { recursive: true });
 
-          await fs.promises.writeFile(
-            certificatePath,
-            pems.private + pems.cert,
-            {
-              encoding: "utf8",
-            }
-          );
+          await fs.promises.writeFile(certificatePath, pems.private + pems.cert, {
+            encoding: 'utf8',
+          });
         }
 
         fakeCert = await fs.promises.readFile(certificatePath);
@@ -658,35 +618,33 @@ class Server {
       options.https.cert = options.https.cert || fakeCert;
     }
 
-    if (typeof options.ipc === "boolean") {
-      const isWindows = process.platform === "win32";
-      const pipePrefix = isWindows ? "\\\\.\\pipe\\" : os.tmpdir();
-      const pipeName = "webpack-dev-server.sock";
+    if (typeof options.ipc === 'boolean') {
+      const isWindows = process.platform === 'win32';
+      const pipePrefix = isWindows ? '\\\\.\\pipe\\' : os.tmpdir();
+      const pipeName = 'webpack-dev-server.sock';
 
       options.ipc = path.join(pipePrefix, pipeName);
     }
 
-    options.liveReload =
-      typeof options.liveReload !== "undefined" ? options.liveReload : true;
+    options.liveReload = typeof options.liveReload !== 'undefined' ? options.liveReload : true;
 
-    options.magicHtml =
-      typeof options.magicHtml !== "undefined" ? options.magicHtml : true;
+    options.magicHtml = typeof options.magicHtml !== 'undefined' ? options.magicHtml : true;
 
     // https://github.com/webpack/webpack-dev-server/issues/1990
     const defaultOpenOptions = { wait: false };
     const getOpenItemsFromObject = ({ target, ...rest }) => {
       const normalizedOptions = { ...defaultOpenOptions, ...rest };
 
-      if (typeof normalizedOptions.app === "string") {
+      if (typeof normalizedOptions.app === 'string') {
         normalizedOptions.app = {
           name: normalizedOptions.app,
         };
       }
 
-      const normalizedTarget = typeof target === "undefined" ? "<url>" : target;
+      const normalizedTarget = typeof target === 'undefined' ? '<url>' : target;
 
       if (Array.isArray(normalizedTarget)) {
-        return normalizedTarget.map((singleTarget) => {
+        return normalizedTarget.map(singleTarget => {
           return { target: singleTarget, options: normalizedOptions };
         });
       }
@@ -694,19 +652,17 @@ class Server {
       return [{ target: normalizedTarget, options: normalizedOptions }];
     };
 
-    if (typeof options.open === "undefined") {
+    if (typeof options.open === 'undefined') {
       options.open = [];
-    } else if (typeof options.open === "boolean") {
-      options.open = options.open
-        ? [{ target: "<url>", options: defaultOpenOptions }]
-        : [];
-    } else if (typeof options.open === "string") {
+    } else if (typeof options.open === 'boolean') {
+      options.open = options.open ? [{ target: '<url>', options: defaultOpenOptions }] : [];
+    } else if (typeof options.open === 'string') {
       options.open = [{ target: options.open, options: defaultOpenOptions }];
     } else if (Array.isArray(options.open)) {
       const result = [];
 
-      options.open.forEach((item) => {
-        if (typeof item === "string") {
+      options.open.forEach(item => {
+        if (typeof item === 'string') {
           result.push({ target: item, options: defaultOpenOptions });
 
           return;
@@ -720,7 +676,7 @@ class Server {
       options.open = [...getOpenItemsFromObject(options.open)];
     }
 
-    if (typeof options.port === "string" && options.port !== "auto") {
+    if (typeof options.port === 'string' && options.port !== 'auto') {
       options.port = Number(options.port);
     }
 
@@ -734,23 +690,21 @@ class Server {
      *   'context': 'target'
      * }
      */
-    if (typeof options.proxy !== "undefined") {
+    if (typeof options.proxy !== 'undefined') {
       // TODO remove in the next major release, only accept `Array`
       if (!Array.isArray(options.proxy)) {
         if (
-          Object.prototype.hasOwnProperty.call(options.proxy, "target") ||
-          Object.prototype.hasOwnProperty.call(options.proxy, "router")
+          Object.prototype.hasOwnProperty.call(options.proxy, 'target') ||
+          Object.prototype.hasOwnProperty.call(options.proxy, 'router')
         ) {
           options.proxy = [options.proxy];
         } else {
-          options.proxy = Object.keys(options.proxy).map((context) => {
+          options.proxy = Object.keys(options.proxy).map(context => {
             let proxyOptions;
             // For backwards compatibility reasons.
-            const correctedContext = context
-              .replace(/^\*$/, "**")
-              .replace(/\/\*$/, "");
+            const correctedContext = context.replace(/^\*$/, '**').replace(/\/\*$/, '');
 
-            if (typeof options.proxy[context] === "string") {
+            if (typeof options.proxy[context] === 'string') {
               proxyOptions = {
                 context: correctedContext,
                 target: options.proxy[context],
@@ -765,32 +719,32 @@ class Server {
         }
       }
 
-      options.proxy = options.proxy.map((item) => {
-        const getLogLevelForProxy = (level) => {
-          if (level === "none") {
-            return "silent";
+      options.proxy = options.proxy.map(item => {
+        const getLogLevelForProxy = level => {
+          if (level === 'none') {
+            return 'silent';
           }
 
-          if (level === "log") {
-            return "info";
+          if (level === 'log') {
+            return 'info';
           }
 
-          if (level === "verbose") {
-            return "debug";
+          if (level === 'verbose') {
+            return 'debug';
           }
 
           return level;
         };
 
-        if (typeof item.logLevel === "undefined") {
+        if (typeof item.logLevel === 'undefined') {
           item.logLevel = getLogLevelForProxy(
             compilerOptions.infrastructureLogging
               ? compilerOptions.infrastructureLogging.level
-              : "info"
+              : 'info'
           );
         }
 
-        if (typeof item.logProvider === "undefined") {
+        if (typeof item.logProvider === 'undefined') {
           item.logProvider = () => this.logger;
         }
 
@@ -798,21 +752,19 @@ class Server {
       });
     }
 
-    if (typeof options.setupExitSignals === "undefined") {
+    if (typeof options.setupExitSignals === 'undefined') {
       options.setupExitSignals = true;
     }
 
-    if (typeof options.static === "undefined") {
+    if (typeof options.static === 'undefined') {
       options.static = [defaultOptionsForStatic];
-    } else if (typeof options.static === "boolean") {
+    } else if (typeof options.static === 'boolean') {
       options.static = options.static ? [defaultOptionsForStatic] : false;
-    } else if (typeof options.static === "string") {
-      options.static = [
-        { ...defaultOptionsForStatic, directory: options.static },
-      ];
+    } else if (typeof options.static === 'string') {
+      options.static = [{ ...defaultOptionsForStatic, directory: options.static }];
     } else if (Array.isArray(options.static)) {
-      options.static = options.static.map((item) => {
-        if (typeof item === "string") {
+      options.static = options.static.map(item => {
+        if (typeof item === 'string') {
           return { ...defaultOptionsForStatic, directory: item };
         }
 
@@ -823,13 +775,13 @@ class Server {
     }
 
     if (options.static) {
-      options.static.forEach((staticOption) => {
+      options.static.forEach(staticOption => {
         if (Server.isAbsoluteURL(staticOption.directory)) {
-          throw new Error("Using a URL as static.directory is not supported");
+          throw new Error('Using a URL as static.directory is not supported');
         }
 
         // ensure that publicPath is an array
-        if (typeof staticOption.publicPath === "string") {
+        if (typeof staticOption.publicPath === 'string') {
           staticOption.publicPath = [staticOption.publicPath];
         }
 
@@ -845,10 +797,10 @@ class Server {
       });
     }
 
-    if (typeof options.watchFiles === "string") {
+    if (typeof options.watchFiles === 'string') {
       options.watchFiles = [{ paths: options.watchFiles, options: {} }];
     } else if (
-      typeof options.watchFiles === "object" &&
+      typeof options.watchFiles === 'object' &&
       options.watchFiles !== null &&
       !Array.isArray(options.watchFiles)
     ) {
@@ -859,8 +811,8 @@ class Server {
         },
       ];
     } else if (Array.isArray(options.watchFiles)) {
-      options.watchFiles = options.watchFiles.map((item) => {
-        if (typeof item === "string") {
+      options.watchFiles = options.watchFiles.map(item => {
+        if (typeof item === 'string') {
           return { paths: item, options: {} };
         }
 
@@ -870,22 +822,19 @@ class Server {
       options.watchFiles = [];
     }
 
-    const defaultWebSocketServerType = "ws";
-    const defaultWebSocketServerOptions = { path: "/ws" };
+    const defaultWebSocketServerType = 'ws';
+    const defaultWebSocketServerOptions = { path: '/ws' };
 
-    if (typeof options.webSocketServer === "undefined") {
+    if (typeof options.webSocketServer === 'undefined') {
       options.webSocketServer = {
         type: defaultWebSocketServerType,
         options: defaultWebSocketServerOptions,
       };
-    } else if (
-      typeof options.webSocketServer === "boolean" &&
-      !options.webSocketServer
-    ) {
+    } else if (typeof options.webSocketServer === 'boolean' && !options.webSocketServer) {
       options.webSocketServer = false;
     } else if (
-      typeof options.webSocketServer === "string" ||
-      typeof options.webSocketServer === "function"
+      typeof options.webSocketServer === 'string' ||
+      typeof options.webSocketServer === 'function'
     ) {
       options.webSocketServer = {
         type: options.webSocketServer,
@@ -900,10 +849,8 @@ class Server {
         },
       };
 
-      if (typeof options.webSocketServer.options.port === "string") {
-        options.webSocketServer.options.port = Number(
-          options.webSocketServer.options.port
-        );
+      if (typeof options.webSocketServer.options.port === 'string') {
+        options.webSocketServer.options.port = Number(options.webSocketServer.options.port);
       }
     }
   }
@@ -914,35 +861,31 @@ class Server {
 
     const isKnownWebSocketServerImplementation =
       this.options.webSocketServer &&
-      typeof this.options.webSocketServer.type === "string" &&
-      (this.options.webSocketServer.type === "ws" ||
-        this.options.webSocketServer.type === "sockjs");
+      typeof this.options.webSocketServer.type === 'string' &&
+      (this.options.webSocketServer.type === 'ws' ||
+        this.options.webSocketServer.type === 'sockjs');
 
     let clientTransport;
 
     if (this.options.client) {
-      if (typeof this.options.client.webSocketTransport !== "undefined") {
+      if (typeof this.options.client.webSocketTransport !== 'undefined') {
         clientTransport = this.options.client.webSocketTransport;
       } else if (isKnownWebSocketServerImplementation) {
         clientTransport = this.options.webSocketServer.type;
       } else {
-        clientTransport = "ws";
+        clientTransport = 'ws';
       }
     } else {
-      clientTransport = "ws";
+      clientTransport = 'ws';
     }
 
     switch (typeof clientTransport) {
-      case "string":
+      case 'string':
         // could be 'sockjs', 'ws', or a path that should be required
-        if (clientTransport === "sockjs") {
-          ClientImplementation = require.resolve(
-            "../client/clients/SockJSClient"
-          );
-        } else if (clientTransport === "ws") {
-          ClientImplementation = require.resolve(
-            "../client/clients/WebSocketClient"
-          );
+        if (clientTransport === 'sockjs') {
+          ClientImplementation = require.resolve('../client/clients/SockJSClient');
+        } else if (clientTransport === 'ws') {
+          ClientImplementation = require.resolve('../client/clients/WebSocketClient');
         } else {
           try {
             // eslint-disable-next-line import/no-dynamic-require
@@ -960,8 +903,8 @@ class Server {
       throw new Error(
         `${
           !isKnownWebSocketServerImplementation
-            ? "When you use custom web socket implementation you must explicitly specify client.webSocketTransport. "
-            : ""
+            ? 'When you use custom web socket implementation you must explicitly specify client.webSocketTransport. '
+            : ''
         }client.webSocketTransport must be a string denoting a default implementation (e.g. 'sockjs', 'ws') or a full path to a JS file via require.resolve(...) which exports a class `
       );
     }
@@ -974,12 +917,12 @@ class Server {
     let implementationFound = true;
 
     switch (typeof this.options.webSocketServer.type) {
-      case "string":
+      case 'string':
         // Could be 'sockjs', in the future 'ws', or a path that should be required
-        if (this.options.webSocketServer.type === "sockjs") {
-          implementation = require("./servers/SockJSServer");
-        } else if (this.options.webSocketServer.type === "ws") {
-          implementation = require("./servers/WebsocketServer");
+        if (this.options.webSocketServer.type === 'sockjs') {
+          implementation = require('./servers/SockJSServer');
+        } else if (this.options.webSocketServer.type === 'ws') {
+          implementation = require('./servers/WebsocketServer');
         } else {
           try {
             // eslint-disable-next-line import/no-dynamic-require
@@ -989,7 +932,7 @@ class Server {
           }
         }
         break;
-      case "function":
+      case 'function':
         implementation = this.options.webSocketServer.type;
         break;
       default:
@@ -999,8 +942,8 @@ class Server {
     if (!implementationFound) {
       throw new Error(
         "webSocketServer (webSocketServer.type) must be a string denoting a default implementation (e.g. 'ws', 'sockjs'), a full path to " +
-          "a JS file which exports a class extending BaseServer (webpack-dev-server/lib/servers/BaseServer.js) " +
-          "via require.resolve(...), or the class itself which extends BaseServer"
+          'a JS file which exports a class extending BaseServer (webpack-dev-server/lib/servers/BaseServer.js) ' +
+          'via require.resolve(...), or the class itself which extends BaseServer'
       );
     }
 
@@ -1008,13 +951,13 @@ class Server {
   }
 
   setupProgressPlugin() {
-    const { ProgressPlugin } = this.compiler.webpack || require("webpack");
+    const { ProgressPlugin } = this.compiler.webpack || require('webpack');
 
     new ProgressPlugin((percent, msg, addInfo, pluginName) => {
       percent = Math.floor(percent * 100);
 
       if (percent === 100) {
-        msg = "Compilation completed";
+        msg = 'Compilation completed';
       }
 
       if (addInfo) {
@@ -1022,7 +965,7 @@ class Server {
       }
 
       if (this.webSocketServer) {
-        this.sendMessage(this.webSocketServer.clients, "progress-update", {
+        this.sendMessage(this.webSocketServer.clients, 'progress-update', {
           percent,
           msg,
           pluginName,
@@ -1030,7 +973,7 @@ class Server {
       }
 
       if (this.server) {
-        this.server.emit("progress-update", { percent, msg, pluginName });
+        this.server.emit('progress-update', { percent, msg, pluginName });
       }
     }).apply(this.compiler);
   }
@@ -1039,10 +982,10 @@ class Server {
     const compilers = this.compiler.compilers || [this.compiler];
 
     // eslint-disable-next-line no-shadow
-    compilers.forEach((compiler) => {
+    compilers.forEach(compiler => {
       this.addAdditionalEntries(compiler);
 
-      const webpack = compiler.webpack || require("webpack");
+      const webpack = compiler.webpack || require('webpack');
 
       const providePlugin = new webpack.ProvidePlugin({
         __webpack_dev_server_client__: this.getClientTransport(),
@@ -1055,7 +998,7 @@ class Server {
 
       if (this.options.hot) {
         const HMRPluginExists = compiler.options.plugins.find(
-          (p) => p.constructor === webpack.HotModuleReplacementPlugin
+          p => p.constructor === webpack.HotModuleReplacementPlugin
         );
 
         if (HMRPluginExists) {
@@ -1085,9 +1028,9 @@ class Server {
     this.createServer();
 
     if (this.options.setupExitSignals) {
-      const signals = ["SIGINT", "SIGTERM"];
+      const signals = ['SIGINT', 'SIGTERM'];
 
-      signals.forEach((signal) => {
+      signals.forEach(signal => {
         process.on(signal, () => {
           this.stopCallback(() => {
             // eslint-disable-next-line no-process-exit
@@ -1101,7 +1044,7 @@ class Server {
     // https://github.com/chimurai/http-proxy-middleware#external-websocket-upgrade
     // eslint-disable-next-line func-names
     this.webSocketProxies.forEach(function (webSocketProxy) {
-      this.server.on("upgrade", webSocketProxy.upgrade);
+      this.server.on('upgrade', webSocketProxy.upgrade);
     }, this);
   }
 
@@ -1123,13 +1066,13 @@ class Server {
   }
 
   setupHooks() {
-    const addHooks = (compiler) => {
-      compiler.hooks.invalid.tap("webpack-dev-server", () => {
+    const addHooks = compiler => {
+      compiler.hooks.invalid.tap('webpack-dev-server', () => {
         if (this.webSocketServer) {
-          this.sendMessage(this.webSocketServer.clients, "invalid");
+          this.sendMessage(this.webSocketServer.clients, 'invalid', undefined, [compiler.name]);
         }
       });
-      compiler.hooks.done.tap("webpack-dev-server", (stats) => {
+      compiler.hooks.done.tap('webpack-dev-server', stats => {
         if (this.webSocketServer) {
           this.sendStats(this.webSocketServer.clients, this.getStats(stats));
         }
@@ -1146,69 +1089,59 @@ class Server {
   }
 
   setupHostHeaderCheck() {
-    this.app.all("*", (req, res, next) => {
-      if (this.checkHeader(req.headers, "host")) {
+    this.app.all('*', (req, res, next) => {
+      if (this.checkHeader(req.headers, 'host')) {
         return next();
       }
 
-      res.send("Invalid Host header");
+      res.send('Invalid Host header');
     });
   }
 
   setupDevMiddleware() {
-    const webpackDevMiddleware = require("webpack-dev-middleware");
+    const webpackDevMiddleware = require('webpack-dev-middleware');
 
     // middleware for serving webpack bundle
-    this.middleware = webpackDevMiddleware(
-      this.compiler,
-      this.options.devMiddleware
-    );
+    this.middleware = webpackDevMiddleware(this.compiler, this.options.devMiddleware);
   }
 
   setupBuiltInRoutes() {
     const { app, middleware } = this;
 
-    app.get("/__webpack_dev_server__/sockjs.bundle.js", (req, res) => {
-      res.setHeader("Content-Type", "application/javascript");
+    app.get('/__webpack_dev_server__/sockjs.bundle.js', (req, res) => {
+      res.setHeader('Content-Type', 'application/javascript');
 
       const { createReadStream } = fs;
-      const clientPath = path.join(__dirname, "..", "client");
+      const clientPath = path.join(__dirname, '..', 'client');
 
-      createReadStream(
-        path.join(clientPath, "modules/sockjs-client/index.js")
-      ).pipe(res);
+      createReadStream(path.join(clientPath, 'modules/sockjs-client/index.js')).pipe(res);
     });
 
-    app.get("/webpack-dev-server/invalidate", (_req, res) => {
+    app.get('/webpack-dev-server/invalidate', (_req, res) => {
       this.invalidate();
 
       res.end();
     });
 
-    app.get("/webpack-dev-server", (req, res) => {
-      middleware.waitUntilValid((stats) => {
-        res.setHeader("Content-Type", "text/html");
-        res.write(
-          '<!DOCTYPE html><html><head><meta charset="utf-8"/></head><body>'
-        );
+    app.get('/webpack-dev-server', (req, res) => {
+      middleware.waitUntilValid(stats => {
+        res.setHeader('Content-Type', 'text/html');
+        res.write('<!DOCTYPE html><html><head><meta charset="utf-8"/></head><body>');
 
         const statsForPrint =
-          typeof stats.stats !== "undefined"
-            ? stats.toJson().children
-            : [stats.toJson()];
+          typeof stats.stats !== 'undefined' ? stats.toJson().children : [stats.toJson()];
 
         res.write(`<h1>Assets Report:</h1>`);
 
         statsForPrint.forEach((item, index) => {
-          res.write("<div>");
+          res.write('<div>');
 
-          const name =
-            item.name || (stats.stats ? `unnamed[${index}]` : "unnamed");
+          const name = item.name || (stats.stats ? `unnamed[${index}]` : 'unnamed');
 
           res.write(`<h2>Compilation: ${name}</h2>`);
-          res.write("<ul>");
+          res.write('<ul>');
 
-          const publicPath = item.publicPath === "auto" ? "" : item.publicPath;
+          const publicPath = item.publicPath === 'auto' ? '' : item.publicPath;
 
           for (const asset of item.assets) {
             const assetName = asset.name;
@@ -1221,25 +1154,25 @@ class Server {
             );
           }
 
-          res.write("</ul>");
-          res.write("</div>");
+          res.write('</ul>');
+          res.write('</div>');
         });
 
-        res.end("</body></html>");
+        res.end('</body></html>');
       });
     });
   }
 
   setupCompressFeature() {
-    const compress = require("compression");
+    const compress = require('compression');
 
     this.app.use(compress());
   }
 
   setupProxyFeature() {
-    const { createProxyMiddleware } = require("http-proxy-middleware");
+    const { createProxyMiddleware } = require('http-proxy-middleware');
 
-    const getProxyMiddleware = (proxyConfig) => {
+    const getProxyMiddleware = proxyConfig => {
       // It is possible to use the `bypass` method without a `target` or `router`.
       // However, the proxy middleware has no use in this case, and will fail to instantiate.
       if (proxyConfig.target) {
@@ -1268,11 +1201,11 @@ class Server {
      *   }
      * ]
      */
-    this.options.proxy.forEach((proxyConfigOrCallback) => {
+    this.options.proxy.forEach(proxyConfigOrCallback => {
       let proxyMiddleware;
 
       let proxyConfig =
-        typeof proxyConfigOrCallback === "function"
+        typeof proxyConfigOrCallback === 'function'
           ? proxyConfigOrCallback()
           : proxyConfigOrCallback;
 
@@ -1283,7 +1216,7 @@ class Server {
       }
 
       const handle = async (req, res, next) => {
-        if (typeof proxyConfigOrCallback === "function") {
+        if (typeof proxyConfigOrCallback === 'function') {
           const newProxyConfig = proxyConfigOrCallback(req, res, next);
 
           if (newProxyConfig !== proxyConfig) {
@@ -1296,16 +1229,16 @@ class Server {
         // - In case the bypass function is defined we'll retrieve the
         // bypassUrl from it otherwise bypassUrl would be null
         // TODO remove in the next major in favor `context` and `router` options
-        const isByPassFuncDefined = typeof proxyConfig.bypass === "function";
+        const isByPassFuncDefined = typeof proxyConfig.bypass === 'function';
         const bypassUrl = isByPassFuncDefined
           ? await proxyConfig.bypass(req, res, proxyConfig)
           : null;
 
-        if (typeof bypassUrl === "boolean") {
+        if (typeof bypassUrl === 'boolean') {
           // skip the proxy
           req.url = null;
           next();
-        } else if (typeof bypassUrl === "string") {
+        } else if (typeof bypassUrl === 'string') {
           // byPass to that url
           req.url = bypassUrl;
           next();
@@ -1325,23 +1258,20 @@ class Server {
   setupHistoryApiFallbackFeature() {
     const { historyApiFallback } = this.options;
 
-    if (
-      typeof historyApiFallback.logger === "undefined" &&
-      !historyApiFallback.verbose
-    ) {
+    if (typeof historyApiFallback.logger === 'undefined' && !historyApiFallback.verbose) {
       historyApiFallback.logger = this.logger.log.bind(
         this.logger,
-        "[connect-history-api-fallback]"
+        '[connect-history-api-fallback]'
       );
     }
 
     // Fall back to /index.html if nothing else matches.
-    this.app.use(require("connect-history-api-fallback")(historyApiFallback));
+    this.app.use(require('connect-history-api-fallback')(historyApiFallback));
   }
 
   setupStaticFeature() {
-    this.options.static.forEach((staticOption) => {
-      staticOption.publicPath.forEach((publicPath) => {
+    this.options.static.forEach(staticOption => {
+      staticOption.publicPath.forEach(publicPath => {
         this.app.use(
           publicPath,
           express.static(staticOption.directory, staticOption.staticOptions)
@@ -1351,22 +1281,18 @@ class Server {
   }
 
   setupStaticServeIndexFeature() {
-    const serveIndex = require("serve-index");
+    const serveIndex = require('serve-index');
 
-    this.options.static.forEach((staticOption) => {
-      staticOption.publicPath.forEach((publicPath) => {
+    this.options.static.forEach(staticOption => {
+      staticOption.publicPath.forEach(publicPath => {
         if (staticOption.serveIndex) {
           this.app.use(publicPath, (req, res, next) => {
             // serve-index doesn't fallthrough non-get/head request to next middleware
-            if (req.method !== "GET" && req.method !== "HEAD") {
+            if (req.method !== 'GET' && req.method !== 'HEAD') {
               return next();
             }
 
-            serveIndex(staticOption.directory, staticOption.serveIndex)(
-              req,
-              res,
-              next
-            );
+            serveIndex(staticOption.directory, staticOption.serveIndex)(req, res, next);
           });
         }
       });
@@ -1374,7 +1300,7 @@ class Server {
   }
 
   setupStaticWatchFeature() {
-    this.options.static.forEach((staticOption) => {
+    this.options.static.forEach(staticOption => {
       if (staticOption.watch) {
         this.watchFiles(staticOption.directory, staticOption.watch);
       }
@@ -1389,7 +1315,7 @@ class Server {
     const { watchFiles } = this.options;
 
     if (watchFiles.length > 0) {
-      watchFiles.forEach((item) => {
+      watchFiles.forEach(item => {
         this.watchFiles(item.paths, item.options);
       });
     }
@@ -1404,11 +1330,11 @@ class Server {
   }
 
   setupHeadersFeature() {
-    this.app.all("*", this.setHeaders.bind(this));
+    this.app.all('*', this.setHeaders.bind(this));
   }
 
   setupMagicHtmlFeature() {
-    this.app.get("*", this.serveMagicHtml.bind(this));
+    this.app.get('*', this.serveMagicHtml.bind(this));
   }
 
   setupFeatures() {
@@ -1438,12 +1364,12 @@ class Server {
         this.setupStaticWatchFeature();
       },
       onBeforeSetupMiddleware: () => {
-        if (typeof this.options.onBeforeSetupMiddleware === "function") {
+        if (typeof this.options.onBeforeSetupMiddleware === 'function') {
           this.setupOnBeforeSetupMiddlewareFeature();
         }
       },
       onAfterSetupMiddleware: () => {
-        if (typeof this.options.onAfterSetupMiddleware === "function") {
+        if (typeof this.options.onAfterSetupMiddleware === 'function') {
           this.setupOnAfterSetupMiddlewareFeature();
         }
       },
@@ -1464,44 +1390,44 @@ class Server {
 
     // compress is placed last and uses unshift so that it will be the first middleware used
     if (this.options.compress) {
-      runnableFeatures.push("compress");
+      runnableFeatures.push('compress');
     }
 
     if (this.options.onBeforeSetupMiddleware) {
-      runnableFeatures.push("onBeforeSetupMiddleware");
+      runnableFeatures.push('onBeforeSetupMiddleware');
     }
 
-    runnableFeatures.push("headers", "middleware");
+    runnableFeatures.push('headers', 'middleware');
 
     if (this.options.proxy) {
-      runnableFeatures.push("proxy", "middleware");
+      runnableFeatures.push('proxy', 'middleware');
     }
 
     if (this.options.static) {
-      runnableFeatures.push("static");
+      runnableFeatures.push('static');
     }
 
     if (this.options.historyApiFallback) {
-      runnableFeatures.push("historyApiFallback", "middleware");
+      runnableFeatures.push('historyApiFallback', 'middleware');
 
       if (this.options.static) {
-        runnableFeatures.push("static");
+        runnableFeatures.push('static');
       }
     }
 
     if (this.options.static) {
-      runnableFeatures.push("staticServeIndex", "staticWatch");
+      runnableFeatures.push('staticServeIndex', 'staticWatch');
     }
 
     if (this.options.magicHtml) {
-      runnableFeatures.push("magicHtml");
+      runnableFeatures.push('magicHtml');
     }
 
     if (this.options.onAfterSetupMiddleware) {
-      runnableFeatures.push("onAfterSetupMiddleware");
+      runnableFeatures.push('onAfterSetupMiddleware');
     }
 
-    runnableFeatures.forEach((feature) => {
+    runnableFeatures.forEach(feature => {
       features[feature]();
     });
   }
@@ -1510,49 +1436,49 @@ class Server {
     if (this.options.https) {
       if (this.options.http2) {
         // TODO: we need to replace spdy with http2 which is an internal module
-        this.server = require("spdy").createServer(
+        this.server = require('spdy').createServer(
           {
             ...this.options.https,
             spdy: {
-              protocols: ["h2", "http/1.1"],
+              protocols: ['h2', 'http/1.1'],
             },
           },
           this.app
         );
       } else {
-        const https = require("https");
+        const https = require('https');
 
         this.server = https.createServer(this.options.https, this.app);
       }
     } else {
-      const http = require("http");
+      const http = require('http');
 
       this.server = http.createServer(this.app);
     }
 
-    this.server.on("connection", (socket) => {
+    this.server.on('connection', socket => {
       // Add socket to list
       this.sockets.push(socket);
 
-      socket.once("close", () => {
+      socket.once('close', () => {
         // Remove socket from list
         this.sockets.splice(this.sockets.indexOf(socket), 1);
       });
     });
 
-    this.server.on("error", (error) => {
+    this.server.on('error', error => {
       throw error;
     });
   }
 
   createWebSocketServer() {
     this.webSocketServer = new (this.getServerTransport())(this);
-    this.webSocketServer.implementation.on("connection", (client, request) => {
+    this.webSocketServer.implementation.on('connection', (client, request) => {
       const headers =
         // eslint-disable-next-line no-nested-ternary
-        typeof request !== "undefined"
+        typeof request !== 'undefined'
           ? request.headers
-          : typeof client.headers !== "undefined"
+          : typeof client.headers !== 'undefined'
           ? client.headers
           : // eslint-disable-next-line no-undefined
             undefined;
@@ -1562,33 +1488,30 @@ class Server {
           'webSocketServer implementation must pass headers for the "connection" event'
         );
       }
+      const platforms = [this.stats?.name].filter(Boolean);
 
-      if (
-        !headers ||
-        !this.checkHeader(headers, "host") ||
-        !this.checkHeader(headers, "origin")
-      ) {
-        this.sendMessage([client], "error", "Invalid Host/Origin header");
+      if (!headers || !this.checkHeader(headers, 'host') || !this.checkHeader(headers, 'origin')) {
+        this.sendMessage([client], 'error', 'Invalid Host/Origin header', platforms);
 
         client.terminate();
 
         return;
       }
 
-      if (this.options.hot === true || this.options.hot === "only") {
-        this.sendMessage([client], "hot");
+      if (this.options.hot === true || this.options.hot === 'only') {
+        this.sendMessage([client], 'hot', undefined, platforms);
       }
 
       if (this.options.liveReload) {
-        this.sendMessage([client], "liveReload");
+        this.sendMessage([client], 'liveReload', undefined, platforms);
       }
 
       if (this.options.client && this.options.client.progress) {
-        this.sendMessage([client], "progress", this.options.client.progress);
+        this.sendMessage([client], 'progress', this.options.client.progress, platforms);
       }
 
       if (this.options.client && this.options.client.overlay) {
-        this.sendMessage([client], "overlay", this.options.client.overlay);
+        this.sendMessage([client], 'overlay', this.options.client.overlay, platforms);
       }
 
       if (!this.stats) {
@@ -1600,13 +1523,13 @@ class Server {
   }
 
   openBrowser(defaultOpenTarget) {
-    const open = require("open");
+    const open = require('open');
 
     Promise.all(
-      this.options.open.map((item) => {
+      this.options.open.map(item => {
         let openTarget;
 
-        if (item.target === "<url>") {
+        if (item.target === '<url>') {
           openTarget = defaultOpenTarget;
         } else {
           openTarget = Server.isAbsoluteURL(item.target)
@@ -1621,12 +1544,10 @@ class Server {
               item.options.app
                 ? ` in "${item.options.app.name}" app${
                     item.options.app.arguments
-                      ? ` with "${item.options.app.arguments.join(
-                          " "
-                        )}" arguments`
-                      : ""
+                      ? ` with "${item.options.app.arguments.join(' ')}" arguments`
+                      : ''
                   }`
-                : ""
+                : ''
             }. If you are running in a headless environment, please do not use the "open" option or related flags like "--open", "--open-target", and "--open-app".`
           );
         });
@@ -1635,17 +1556,17 @@ class Server {
   }
 
   runBonjour() {
-    const bonjour = require("bonjour")();
+    const bonjour = require('bonjour')();
 
     bonjour.publish({
       name: `Webpack Dev Server ${os.hostname()}:${this.options.port}`,
       port: this.options.port,
-      type: this.options.https ? "https" : "http",
-      subtypes: ["webpack"],
+      type: this.options.https ? 'https' : 'http',
+      subtypes: ['webpack'],
       ...this.options.bonjour,
     });
 
-    process.on("exit", () => {
+    process.on('exit', () => {
       bonjour.unpublishAll(() => {
         bonjour.destroy();
       });
@@ -1653,15 +1574,12 @@ class Server {
   }
 
   logStatus() {
-    const colorette = require("colorette");
+    const colorette = require('colorette');
 
-    const getColorsOption = (compilerOptions) => {
+    const getColorsOption = compilerOptions => {
       let colorsEnabled;
 
-      if (
-        compilerOptions.stats &&
-        typeof compilerOptions.stats.colors !== "undefined"
-      ) {
+      if (compilerOptions.stats && typeof compilerOptions.stats.colors !== 'undefined') {
         colorsEnabled = compilerOptions.stats;
       } else {
         colorsEnabled = colorette.options.enabled;
@@ -1691,10 +1609,10 @@ class Server {
     if (this.options.ipc) {
       this.logger.info(`Project is running at: "${this.server.address()}"`);
     } else {
-      const protocol = this.options.https ? "https" : "http";
+      const protocol = this.options.https ? 'https' : 'http';
       const { address, port } = this.server.address();
-      const prettyPrintURL = (newHostname) =>
-        url.format({ protocol, hostname: newHostname, port, pathname: "/" });
+      const prettyPrintURL = newHostname =>
+        url.format({ protocol, hostname: newHostname, port, pathname: '/' });
 
       let server;
       let localhost;
@@ -1704,8 +1622,8 @@ class Server {
       let networkUrlIPv6;
 
       if (this.options.host) {
-        if (this.options.host === "localhost") {
-          localhost = prettyPrintURL("localhost");
+        if (this.options.host === 'localhost') {
+          localhost = prettyPrintURL('localhost');
         } else {
           let isIP;
 
@@ -1723,8 +1641,8 @@ class Server {
 
       const parsedIP = ipaddr.parse(address);
 
-      if (parsedIP.range() === "unspecified") {
-        localhost = prettyPrintURL("localhost");
+      if (parsedIP.range() === 'unspecified') {
+        localhost = prettyPrintURL('localhost');
 
         const networkIPv4 = internalIp.v4.sync();
 
@@ -1737,24 +1655,24 @@ class Server {
         if (networkIPv6) {
           networkUrlIPv6 = prettyPrintURL(networkIPv6);
         }
-      } else if (parsedIP.range() === "loopback") {
-        if (parsedIP.kind() === "ipv4") {
+      } else if (parsedIP.range() === 'loopback') {
+        if (parsedIP.kind() === 'ipv4') {
           loopbackIPv4 = prettyPrintURL(parsedIP.toString());
-        } else if (parsedIP.kind() === "ipv6") {
+        } else if (parsedIP.kind() === 'ipv6') {
           loopbackIPv6 = prettyPrintURL(parsedIP.toString());
         }
       } else {
         networkUrlIPv4 =
-          parsedIP.kind() === "ipv6" && parsedIP.isIPv4MappedAddress()
+          parsedIP.kind() === 'ipv6' && parsedIP.isIPv4MappedAddress()
             ? prettyPrintURL(parsedIP.toIPv4Address().toString())
             : prettyPrintURL(address);
 
-        if (parsedIP.kind() === "ipv6") {
+        if (parsedIP.kind() === 'ipv6') {
           networkUrlIPv6 = prettyPrintURL(address);
         }
       }
 
-      this.logger.info("Project is running at:");
+      this.logger.info('Project is running at:');
 
       if (server) {
         this.logger.info(`Server: ${colors.info(useColor, server)}`);
@@ -1766,23 +1684,19 @@ class Server {
           .concat(loopbackIPv4 ? [colors.info(useColor, loopbackIPv4)] : [])
           .concat(loopbackIPv6 ? [colors.info(useColor, loopbackIPv6)] : []);
 
-        this.logger.info(`Loopback: ${loopbacks.join(", ")}`);
+        this.logger.info(`Loopback: ${loopbacks.join(', ')}`);
       }
 
       if (networkUrlIPv4) {
-        this.logger.info(
-          `On Your Network (IPv4): ${colors.info(useColor, networkUrlIPv4)}`
-        );
+        this.logger.info(`On Your Network (IPv4): ${colors.info(useColor, networkUrlIPv4)}`);
       }
 
       if (networkUrlIPv6) {
-        this.logger.info(
-          `On Your Network (IPv6): ${colors.info(useColor, networkUrlIPv6)}`
-        );
+        this.logger.info(`On Your Network (IPv6): ${colors.info(useColor, networkUrlIPv6)}`);
       }
 
       if (this.options.open.length > 0) {
-        const openTarget = prettyPrintURL(this.options.host || "localhost");
+        const openTarget = prettyPrintURL(this.options.host || 'localhost');
 
         this.openBrowser(openTarget);
       }
@@ -1792,9 +1706,7 @@ class Server {
       this.logger.info(
         `Content not from webpack is served from '${colors.info(
           useColor,
-          this.options.static
-            .map((staticOption) => staticOption.directory)
-            .join(", ")
+          this.options.static.map(staticOption => staticOption.directory).join(', ')
         )}' directory`
       );
     }
@@ -1803,14 +1715,13 @@ class Server {
       this.logger.info(
         `404s will fallback to '${colors.info(
           useColor,
-          this.options.historyApiFallback.index || "/index.html"
+          this.options.historyApiFallback.index || '/index.html'
         )}'`
       );
     }
 
     if (this.options.bonjour) {
-      const bonjourProtocol =
-        this.options.bonjour.type || this.options.https ? "https" : "http";
+      const bonjourProtocol = this.options.bonjour.type || this.options.https ? 'https' : 'http';
 
       this.logger.info(
         `Broadcasting "${bonjourProtocol}" with subtype of "webpack" via ZeroConf DNS (Bonjour)`
@@ -1822,7 +1733,7 @@ class Server {
     let { headers } = this.options;
 
     if (headers) {
-      if (typeof headers === "function") {
+      if (typeof headers === 'function') {
         headers = headers(req, res, this.middleware.context);
       }
 
@@ -1838,7 +1749,7 @@ class Server {
   checkHeader(headers, headerToCheck) {
     // allow user to opt out of this security check, at their own risk
     // by explicitly enabling allowedHosts
-    if (this.options.allowedHosts === "all") {
+    if (this.options.allowedHosts === 'all') {
       return true;
     }
 
@@ -1869,7 +1780,7 @@ class Server {
     const isValidHostname =
       ipaddr.IPv4.isValid(hostname) ||
       ipaddr.IPv6.isValid(hostname) ||
-      hostname === "localhost" ||
+      hostname === 'localhost' ||
       hostname === this.options.host;
 
     if (isValidHostname) {
@@ -1890,13 +1801,10 @@ class Server {
 
         // support "." as a subdomain wildcard
         // e.g. ".example.com" will allow "example.com", "www.example.com", "subdomain.example.com", etc
-        if (allowedHost[0] === ".") {
+        if (allowedHost[0] === '.') {
           // "example.com"  (hostname === allowedHost.substring(1))
           // "*.example.com"  (hostname.endsWith(allowedHost))
-          if (
-            hostname === allowedHost.substring(1) ||
-            hostname.endsWith(allowedHost)
-          ) {
+          if (hostname === allowedHost.substring(1) || hostname.endsWith(allowedHost)) {
             return true;
           }
         }
@@ -1904,10 +1812,7 @@ class Server {
     }
 
     // Also allow if `client.webSocketURL.hostname` provided
-    if (
-      this.options.client &&
-      typeof this.options.client.webSocketURL !== "undefined"
-    ) {
+    if (this.options.client && typeof this.options.client.webSocketURL !== 'undefined') {
       return this.options.client.webSocketURL.hostname === hostname;
     }
 
@@ -1916,12 +1821,12 @@ class Server {
   }
 
   // eslint-disable-next-line class-methods-use-this
-  sendMessage(clients, type, data) {
-    clients.forEach((client) => {
+  sendMessage(clients, type, data, platforms = []) {
+    clients.forEach(client => {
       // `sockjs` uses `1` to indicate client is ready to accept data
       // `ws` uses `WebSocket.OPEN`, but it is mean `1` too
       if (client.readyState === 1) {
-        client.send(JSON.stringify({ type, data }));
+        client.send(JSON.stringify({ type, data, platforms }));
       }
     });
   }
@@ -1932,16 +1837,14 @@ class Server {
 
       try {
         const filename = this.middleware.getFilenameFromUrl(`${_path}.js`);
-        const isFile = this.middleware.context.outputFileSystem
-          .statSync(filename)
-          .isFile();
+        const isFile = this.middleware.context.outputFileSystem.statSync(filename).isFile();
 
         if (!isFile) {
           return next();
         }
 
         // Serve a page that executes the javascript
-        const queries = req._parsedUrl.search || "";
+        const queries = req._parsedUrl.search || '';
         const responsePage = `<!DOCTYPE html><html><head><meta charset="utf-8"/></head><body><script type="text/javascript" charset="utf-8" src="${_path}.js${queries}"></script></body></html>`;
 
         res.send(responsePage);
@@ -1959,26 +1862,26 @@ class Server {
       (!stats.errors || stats.errors.length === 0) &&
       (!stats.warnings || stats.warnings.length === 0) &&
       stats.assets &&
-      stats.assets.every((asset) => !asset.emitted);
+      stats.assets.every(asset => !asset.emitted);
 
     if (shouldEmit) {
-      this.sendMessage(clients, "still-ok");
+      this.sendMessage(clients, 'still-ok', undefined, [stats.name]);
 
       return;
     }
 
-    this.sendMessage(clients, "hash", stats.hash);
+    this.sendMessage(clients, 'hash', stats.hash, [stats.name]);
 
     if (stats.errors.length > 0 || stats.warnings.length > 0) {
       if (stats.warnings.length > 0) {
-        this.sendMessage(clients, "warnings", stats.warnings);
+        this.sendMessage(clients, 'warnings', stats.warnings, [stats.name]);
       }
 
       if (stats.errors.length > 0) {
-        this.sendMessage(clients, "errors", stats.errors);
+        this.sendMessage(clients, 'errors', stats.errors, [stats.name]);
       }
     } else {
-      this.sendMessage(clients, "ok");
+      this.sendMessage(clients, 'ok', undefined, [stats.name]);
     }
   }
 
@@ -1988,14 +1891,14 @@ class Server {
     // this isn't an elegant solution, but we'll improve it in the future
     // eslint-disable-next-line no-undefined
     const usePolling =
-      typeof watchOptions.usePolling !== "undefined"
+      typeof watchOptions.usePolling !== 'undefined'
         ? watchOptions.usePolling
         : Boolean(watchOptions.poll);
     const interval =
       // eslint-disable-next-line no-nested-ternary
-      typeof watchOptions.interval !== "undefined"
+      typeof watchOptions.interval !== 'undefined'
         ? watchOptions.interval
-        : typeof watchOptions.poll === "number"
+        : typeof watchOptions.poll === 'number'
         ? watchOptions.poll
         : // eslint-disable-next-line no-undefined
           undefined;
@@ -2012,19 +1915,15 @@ class Server {
       interval,
     };
 
-    const chokidar = require("chokidar");
+    const chokidar = require('chokidar');
 
     const watcher = chokidar.watch(watchPath, finalWatchOptions);
 
     // disabling refreshing on changing the content
     if (this.options.liveReload) {
-      watcher.on("change", (item) => {
+      watcher.on('change', item => {
         if (this.webSocketServer) {
-          this.sendMessage(
-            this.webSocketServer.clients,
-            "static-changed",
-            item
-          );
+          this.sendMessage(this.webSocketServer.clients, 'static-changed', item);
         }
       });
     }
@@ -2043,18 +1942,18 @@ class Server {
 
     if (this.options.ipc) {
       await new Promise((resolve, reject) => {
-        const net = require("net");
+        const net = require('net');
         const socket = new net.Socket();
 
-        socket.on("error", (error) => {
-          if (error.code === "ECONNREFUSED") {
+        socket.on('error', error => {
+          if (error.code === 'ECONNREFUSED') {
             // No other server listening on this socket so it can be safely removed
             fs.unlinkSync(this.options.ipc);
 
             resolve();
 
             return;
-          } else if (error.code === "ENOENT") {
+          } else if (error.code === 'ENOENT') {
             resolve();
 
             return;
@@ -2078,7 +1977,7 @@ class Server {
       ? { path: this.options.ipc }
       : { host: this.options.host, port: this.options.port };
 
-    await new Promise((resolve) => {
+    await new Promise(resolve => {
       this.server.listen(listenOptions, () => {
         resolve();
       });
@@ -2101,7 +2000,7 @@ class Server {
 
     this.logStatus();
 
-    if (typeof this.options.onListening === "function") {
+    if (typeof this.options.onListening === 'function') {
       this.options.onListening(this);
     }
   }
@@ -2113,12 +2012,12 @@ class Server {
   async stop() {
     this.webSocketProxies = [];
 
-    await Promise.all(this.staticWatchers.map((watcher) => watcher.close()));
+    await Promise.all(this.staticWatchers.map(watcher => watcher.close()));
 
     this.staticWatchers = [];
 
     if (this.webSocketServer) {
-      await new Promise((resolve) => {
+      await new Promise(resolve => {
         this.webSocketServer.implementation.close(() => {
           this.webSocketServer = null;
 
@@ -2134,7 +2033,7 @@ class Server {
     }
 
     if (this.server) {
-      await new Promise((resolve) => {
+      await new Promise(resolve => {
         this.server.close(() => {
           this.server = null;
 
@@ -2150,7 +2049,7 @@ class Server {
 
       if (this.middleware) {
         await new Promise((resolve, reject) => {
-          this.middleware.close((error) => {
+          this.middleware.close(error => {
             if (error) {
               reject(error);
 
@@ -2175,18 +2074,18 @@ class Server {
     util.deprecate(
       () => {},
       "'listen' is deprecated. Please use async 'start' or 'startCallback' methods.",
-      "DEP_WEBPACK_DEV_SERVER_LISTEN"
+      'DEP_WEBPACK_DEV_SERVER_LISTEN'
     )();
 
-    this.logger = this.compiler.getInfrastructureLogger("webpack-dev-server");
+    this.logger = this.compiler.getInfrastructureLogger('webpack-dev-server');
 
-    if (typeof port === "function") {
+    if (typeof port === 'function') {
       fn = port;
     }
 
     if (
-      typeof port !== "undefined" &&
-      typeof this.options.port !== "undefined" &&
+      typeof port !== 'undefined' &&
+      typeof this.options.port !== 'undefined' &&
       port !== this.options.port
     ) {
       this.options.port = port;
@@ -2201,8 +2100,8 @@ class Server {
     }
 
     if (
-      typeof hostname !== "undefined" &&
-      typeof this.options.host !== "undefined" &&
+      typeof hostname !== 'undefined' &&
+      typeof this.options.host !== 'undefined' &&
       hostname !== this.options.host
     ) {
       this.options.host = hostname;
@@ -2222,7 +2121,7 @@ class Server {
           fn.call(this.server);
         }
       })
-      .catch((error) => {
+      .catch(error => {
         // Nothing
         if (fn) {
           fn.call(this.server, error);
@@ -2235,7 +2134,7 @@ class Server {
     util.deprecate(
       () => {},
       "'close' is deprecated. Please use async 'stop' or 'stopCallback' methods.",
-      "DEP_WEBPACK_DEV_SERVER_CLOSE"
+      'DEP_WEBPACK_DEV_SERVER_CLOSE'
     )();
 
     return this.stop()
@@ -2244,7 +2143,7 @@ class Server {
           callback(null);
         }
       })
-      .catch((error) => {
+      .catch(error => {
         if (callback) {
           callback(error);
         }
@@ -2266,7 +2165,7 @@ const mergeExports = (obj, exports) => {
         enumerable: true,
         get: fn,
       });
-    } else if (typeof descriptor.value === "object") {
+    } else if (typeof descriptor.value === 'object') {
       Object.defineProperty(obj, name, {
         configurable: false,
         enumerable: true,
@@ -2274,9 +2173,7 @@ const mergeExports = (obj, exports) => {
         value: mergeExports({}, descriptor.value),
       });
     } else {
-      throw new Error(
-        "Exposed values must be either a getter or an nested object"
-      );
+      throw new Error('Exposed values must be either a getter or an nested object');
     }
   }
 
@@ -2290,10 +2187,10 @@ module.exports = mergeExports(Server, {
   // TODO compatibility with webpack v4, remove it after drop
   cli: {
     get getArguments() {
-      return () => require("../bin/cli-flags");
+      return () => require('../bin/cli-flags');
     },
     get processArguments() {
-      return require("../bin/process-arguments");
+      return require('../bin/process-arguments');
     },
   },
 });
